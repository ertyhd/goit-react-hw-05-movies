{"version":3,"file":"static/js/539.75931d3b.chunk.js","mappings":"wQA6BA,EAvBe,WACb,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,kHAEGC,EAAAA,EAAAA,MAFH,OAEVC,EAFU,OAGRC,EAAYD,EAAZC,QACRL,GAAS,OAAIK,IAJG,gDAKPC,EALO,KAKPA,SACTC,QAAQC,IAAIF,EAASF,KAAKK,SANV,yDAAH,qDAUjBP,GACD,GAAE,CAACF,KAEF,+BACE,SAACU,EAAA,EAAD,CAAYX,MAAOA,KAGxB,ECpBD,EAJa,WACX,OAAO,SAAC,EAAD,GACR,C,oFCJD,GAAiB,E,SCKXW,EAAa,SAAC,GAAe,IAAbX,EAAY,EAAZA,MACdY,GAAWC,EAAAA,EAAAA,MACXC,EAAWd,EAAMe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACzB,SAAC,KAAD,CAEEC,GAAE,0CAAqCF,GACvCG,UAAWC,EAAAA,WACXC,MAAO,CAAEC,KAAMV,GAJjB,UAME,wBAAKK,KALAD,EAFkB,IAU3B,OAAO,eAAIG,UAAWC,EAAAA,WAAf,SAAkCN,GAC1C,EAED,GAAeS,EAAAA,EAAAA,MAAKZ,E,8JCnBda,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAY,mCAAG,WAAOC,GAAP,8FAAcC,EAAd,+BAAqB,EAArB,SACHP,EAASQ,IAAI,gBAAiB,CACnDL,OAAQ,CACNG,MAAAA,EACAC,KAAAA,KAJsB,uBAClB1B,EADkB,EAClBA,KADkB,kBAOnBA,GAPmB,2CAAH,sDAUZD,EAAS,mCAAG,sGACAoB,EAASQ,IAAI,uBADb,uBACf3B,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,qDA0BT4B,EAAgB,mCAAG,WAAMjB,GAAN,2GAUpBQ,EAASQ,IAAT,iBAAuBhB,IAVH,2BAE5BX,KAF4B,IAG1B6B,eAAAA,OAH0B,MAGT,MAHS,EAI1BC,EAJ0B,EAI1BA,YACAC,EAL0B,EAK1BA,aACAC,EAN0B,EAM1BA,SAN0B,IAO1BC,aAAcC,OAPY,MAOS,MAPT,EAQlBC,EARkB,EAQ1BC,OAIEC,EAAiB,CACrBR,eAAAA,EACAC,YAAaA,EAAW,6DACkCA,GACtD,KACJC,aAAAA,EACAC,SAAAA,EACAC,aAAcC,EAAmBI,MAAM,EAAG,GAC1CF,OAAQD,EAAWzB,KAAI,SAAA6B,GAAG,OAAIA,EAAIC,IAAR,IAAcC,KAAK,OApBjB,kBAuBvBJ,GAvBuB,4CAAH,sDA0BhBK,EAAqB,mCAAG,WAAO/B,GAAP,8FAAWgC,EAAX,+BAAiB,GAAjB,SACZxB,EAASQ,IAAT,iBAAuBhB,GAAvB,OAA4BgC,IADhB,uBAC3B3C,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,qD","sources":["modules/Movies/Movies.jsx","pages/HomePage/HomePage.jsx","shared/components/moviesList.module.css","shared/components/MoviesList.jsx","shared/services/getMovies.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport MoviesList from 'shared/components/MoviesList';\nimport { getMovies } from 'shared/services/getMovies';\n\nconst Movies = () => {\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        const data = await getMovies();\n        const { results } = data;\n        setItems([...results]);\n      } catch ({ responce }) {\n        console.log(responce.data.message);\n      }\n    };\n\n    fetchMovies();\n  }, [setItems]);\n  return (\n    <>\n      <MoviesList items={items} />\n    </>\n  );\n};\n\nexport default Movies;\n\nMovies.propTypes = {\n  items: PropTypes.array,\n};\n","import Movies from 'modules/Movies/Movies';\n// import style from './homePage.module.css';\n\nconst Home = () => {\n  return <Movies />;\n};\n\nexport default Home;\n","// extracted by mini-css-extract-plugin\nexport default {};","import { memo } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport style from './moviesList.module.css';\n\nconst MoviesList = ({ items }) => {\n  const location = useLocation();\n  const elements = items.map(({ id, title }) => (\n    <Link\n      key={id}\n      to={`/goit-react-hw-05-movies/movies/${id}`}\n      className={style.moviesItem}\n      state={{ from: location }}\n    >\n      <li>{title}</li>\n    </Link>\n  ));\n  return <ul className={style.moviesList}>{elements}</ul>;\n};\n\nexport default memo(MoviesList);\n\nMoviesList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '633bd9c8c9bc68a8c4a40449237d5fcd',\n  },\n});\n\nexport const searchMovies = async (query, page = 1) => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n      page,\n    },\n  });\n  return data;\n};\n\nexport const getMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data;\n};\n// //============================================\n// export const getMoviesDetails = async id => {\n//   const requestDetails = {};\n//   const { data } = await instance.get(`/movie/${id}`);\n//   requestDetails.original_title = data.original_title\n//     ? data.original_title\n//     : 'n/a';\n//   requestDetails.poster_path = `https://www.themoviedb.org/t/p/w300_and_h450_bestv2${data.poster_path}`;\n//   requestDetails.popularity = data.popularity;\n//   requestDetails.overview = data.overview;\n//   requestDetails.release_date = data.release_date\n//     ? data.release_date.slice(0, 4)\n//     : 'n/a';\n//   requestDetails.genres = data.genres\n//     .map(gen => {\n//       return gen.name;\n//     })\n//     .join(', ');\n\n//   return requestDetails;\n// };\n//===========================================\nexport const getMoviesDetails = async id => {\n  const {\n    data: {\n      original_title = 'n/a',\n      poster_path,\n      vote_average,\n      overview,\n      release_date: release_date_slice = 'n/a',\n      genres: genres_map,\n    },\n  } = await instance.get(`/movie/${id}`);\n\n  const requestDetails = {\n    original_title,\n    poster_path: poster_path\n      ? `https://www.themoviedb.org/t/p/w300_and_h450_bestv2${poster_path}`\n      : null,\n    vote_average,\n    overview,\n    release_date: release_date_slice.slice(0, 4),\n    genres: genres_map.map(gen => gen.name).join(', '),\n  };\n\n  return requestDetails;\n};\n\nexport const getMoviesAdditionally = async (id, req = '') => {\n  const { data } = await instance.get(`/movie/${id}${req}`);\n  return data;\n};\n"],"names":["useState","items","setItems","useEffect","fetchMovies","getMovies","data","results","responce","console","log","message","MoviesList","location","useLocation","elements","map","id","title","to","className","style","state","from","memo","instance","axios","baseURL","params","api_key","searchMovies","query","page","get","getMoviesDetails","original_title","poster_path","vote_average","overview","release_date","release_date_slice","genres_map","genres","requestDetails","slice","gen","name","join","getMoviesAdditionally","req"],"sourceRoot":""}