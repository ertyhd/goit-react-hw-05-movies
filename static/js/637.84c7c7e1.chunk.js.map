{"version":3,"file":"static/js/637.84c7c7e1.chunk.js","mappings":"gRACA,EAAgC,uCAAhC,EAAqF,qCAArF,EAAgI,6B,SCqEhI,EA7DwB,WACtB,OAAwCA,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAgD,GAA5BR,EAAaS,cAAmBC,QAAQ,GAgBlE,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,sGAEfT,GAAW,GAFI,UAGMU,EAAAA,EAAAA,IAAiBT,GAHvB,OAGTU,EAHS,OAIfb,EAAgBa,GAJD,gDAKNC,EALM,KAKNA,SACTC,QAAQC,IAAIF,EAASG,KAAKC,SANX,yBAQfhB,GAAW,GARI,4EAAH,qDAWhBS,GACD,GAAE,CAACR,KAEF,gCACGF,EAAUkB,EAAAA,QAAAA,SAAiB,cAAgBA,EAAAA,QAAAA,UAC5C,mBACEC,UAAWC,EACXC,QAAS,WACPjB,EAAS,IACV,EAJH,qCAQA,iBAAKe,UAAWC,EAAhB,WACE,gBACEE,IAAI,eACJC,IAAKzB,EAAa0B,YAAc1B,EAAa0B,YAAcC,KAG7D,iBAAKN,UAAWC,EAAhB,WACE,iCACGtB,QADH,IACGA,OADH,EACGA,EAAc4B,eADjB,YACmC5B,QADnC,IACmCA,OADnC,EACmCA,EAAc6B,aADjD,QAGA,wCAAgBrB,EAAhB,QACA,6CAAcR,QAAd,IAAcA,OAAd,EAAcA,EAAc8B,aAC5B,2CAAY9B,QAAZ,IAAYA,OAAZ,EAAYA,EAAc+B,iBAI9B,2BACE,SAAC,KAAD,CAAMC,GAAG,OAAT,UACE,oCAEF,SAAC,KAAD,CAAMA,GAAG,UAAT,UACE,0CAGJ,SAAC,KAAD,MAGL,C,8JClEKC,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAY,mCAAG,WAAOC,GAAP,8FAAcC,EAAd,+BAAqB,EAArB,SACHP,EAASQ,IAAI,gBAAiB,CACnDL,OAAQ,CACNG,MAAAA,EACAC,KAAAA,KAJsB,uBAClBtB,EADkB,EAClBA,KADkB,kBAOnBA,GAPmB,2CAAH,sDAUZwB,EAAS,mCAAG,sGACAT,EAASQ,IAAI,uBADb,uBACfvB,EADe,EACfA,KADe,kBAEhBA,GAFgB,2CAAH,qDA0BTL,EAAgB,mCAAG,WAAMT,GAAN,2GAUpB6B,EAASQ,IAAT,iBAAuBrC,IAVH,2BAE5Bc,KAF4B,IAG1BU,eAAAA,OAH0B,MAGT,MAHS,EAI1BF,EAJ0B,EAI1BA,YACAjB,EAL0B,EAK1BA,aACAqB,EAN0B,EAM1BA,SAN0B,IAO1BD,aAAcc,OAPY,MAOS,MAPT,EAQlBC,EARkB,EAQ1Bb,OAIEc,EAAiB,CACrBjB,eAAAA,EACAF,YAAaA,EAAW,6DACkCA,GACtD,KACJjB,aAAAA,EACAqB,SAAAA,EACAD,aAAcc,EAAmBG,MAAM,EAAG,GAC1Cf,OAAQa,EAAWG,KAAI,SAAAC,GAAG,OAAIA,EAAIC,IAAR,IAAcC,KAAK,OApBjB,kBAuBvBL,GAvBuB,4CAAH,sDA0BhBM,EAAqB,mCAAG,WAAO/C,GAAP,8FAAWgD,EAAX,+BAAiB,GAAjB,SACZnB,EAASQ,IAAT,iBAAuBrC,GAAvB,OAA4BgD,IADhB,uBAC3BlC,EAD2B,EAC3BA,KAD2B,kBAE5BA,GAF4B,2CAAH,qD","sources":["webpack://goit-react-hw-05-movies/./src/pages/SingleMoviePage/singleMoviePage.module.css?e265","pages/SingleMoviePage/SingleMoviePage.jsx","shared/services/getMovies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movie_details\":\"singleMoviePage_movie_details__00KGF\",\"descr_block\":\"singleMoviePage_descr_block__e9Qxl\",\"btn\":\"singleMoviePage_btn__gN3oo\"};","import { Outlet, Link, useParams, useNavigate } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nimport { getMoviesDetails } from '../../shared/services/getMovies';\nimport poster from '../../img/no-poster-available.webp';\n\nimport style from './singleMoviePage.module.css';\n\nconst SingleMoviePage = () => {\n  const [movieDetails, setMovieDetails] = useState('');\n  const [loading, setLoading] = useState(false);\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const voteAverageShort = (movieDetails.vote_average * 10).toFixed(0);\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        const result = await getMoviesDetails(id);\n        setMovieDetails(result);\n      } catch ({ responce }) {\n        console.log(responce.data.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovie();\n  }, [id]);\n  return (\n    <>\n      {loading ? Loading.standard('Loading...') : Loading.remove()}\n      <button\n        className={style.btn}\n        onClick={() => {\n          navigate('/');\n        }}\n      >\n        &#x21A9; Go to home page\n      </button>\n      <div className={style.movie_details}>\n        <img\n          alt=\"movie poster\"\n          src={movieDetails.poster_path ? movieDetails.poster_path : poster}\n        />\n\n        <div className={style.descr_block}>\n          <h1>\n            {movieDetails?.original_title} ({movieDetails?.release_date})\n          </h1>\n          <p>Popularity: {voteAverageShort}%</p>\n          <p>Overview: {movieDetails?.overview}</p>\n          <p>Genres: {movieDetails?.genres}</p>\n        </div>\n      </div>\n\n      <ul>\n        <Link to=\"cast\">\n          <li>Cast</li>\n        </Link>\n        <Link to=\"reviews\">\n          <li>Reviews</li>\n        </Link>\n      </ul>\n      <Outlet />\n    </>\n  );\n};\n\nexport default SingleMoviePage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '633bd9c8c9bc68a8c4a40449237d5fcd',\n  },\n});\n\nexport const searchMovies = async (query, page = 1) => {\n  const { data } = await instance.get('/search/movie', {\n    params: {\n      query,\n      page,\n    },\n  });\n  return data;\n};\n\nexport const getMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data;\n};\n// //============================================\n// export const getMoviesDetails = async id => {\n//   const requestDetails = {};\n//   const { data } = await instance.get(`/movie/${id}`);\n//   requestDetails.original_title = data.original_title\n//     ? data.original_title\n//     : 'n/a';\n//   requestDetails.poster_path = `https://www.themoviedb.org/t/p/w300_and_h450_bestv2${data.poster_path}`;\n//   requestDetails.popularity = data.popularity;\n//   requestDetails.overview = data.overview;\n//   requestDetails.release_date = data.release_date\n//     ? data.release_date.slice(0, 4)\n//     : 'n/a';\n//   requestDetails.genres = data.genres\n//     .map(gen => {\n//       return gen.name;\n//     })\n//     .join(', ');\n\n//   return requestDetails;\n// };\n//===========================================\nexport const getMoviesDetails = async id => {\n  const {\n    data: {\n      original_title = 'n/a',\n      poster_path,\n      vote_average,\n      overview,\n      release_date: release_date_slice = 'n/a',\n      genres: genres_map,\n    },\n  } = await instance.get(`/movie/${id}`);\n\n  const requestDetails = {\n    original_title,\n    poster_path: poster_path\n      ? `https://www.themoviedb.org/t/p/w300_and_h450_bestv2${poster_path}`\n      : null,\n    vote_average,\n    overview,\n    release_date: release_date_slice.slice(0, 4),\n    genres: genres_map.map(gen => gen.name).join(', '),\n  };\n\n  return requestDetails;\n};\n\nexport const getMoviesAdditionally = async (id, req = '') => {\n  const { data } = await instance.get(`/movie/${id}${req}`);\n  return data;\n};\n"],"names":["useState","movieDetails","setMovieDetails","loading","setLoading","id","useParams","navigate","useNavigate","voteAverageShort","vote_average","toFixed","useEffect","fetchMovie","getMoviesDetails","result","responce","console","log","data","message","Loading","className","style","onClick","alt","src","poster_path","poster","original_title","release_date","overview","genres","to","instance","axios","baseURL","params","api_key","searchMovies","query","page","get","getMovies","release_date_slice","genres_map","requestDetails","slice","map","gen","name","join","getMoviesAdditionally","req"],"sourceRoot":""}